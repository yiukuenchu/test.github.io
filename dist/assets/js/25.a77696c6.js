(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{306:function(t,r,a){"use strict";a.r(r);var e=a(2),n=Object(e.a)({},function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，模式描述在搜索文本时要匹配的一个或多个字符串。")])]),t._v(" "),a("h1",{attrs:{id:"📖前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#📖前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 📖前言")]),t._v(" "),a("p",[t._v("大学期间没有好好学习正则表达式，而后一直对正则表达式糊里糊涂的。前不久在实习中遇到了这个“老对手”，特学习了一下正则表达式，趁这个周末写下这篇文章，也算是对自己知识体系的巩固吧。💪")]),t._v(" "),a("p",[t._v("正则表达式看上去很复杂（这也是我当时没有好好学习它的原因😅。。。），让很多初学者放弃去深入理解。但其实只要你去学习了，就会发现，其实它"),a("strong",[t._v("就是很复杂")]),t._v("！（可读性那么差！又不好理解！😠）")]),t._v(" "),a("p",[t._v("说是这么说啦，但工作中还是会经常遇到。不学的话，老板一问到，喵喵喵？？🙇")]),t._v(" "),a("h1",{attrs:{id:"🎈正文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎈正文","aria-hidden":"true"}},[t._v("#")]),t._v(" 🎈正文")]),t._v(" "),a("h2",{attrs:{id:"一-元字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-元字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 一.元字符")]),t._v(" "),a("pre",[a("code",[t._v('1. "^":^会匹配行或者字符串的起始位置，有时还会匹配整个文档的起始位置。\n2. "$":$会匹配行或字符串的结尾。\n3. "\\b":不会消耗任何字符只匹配一个位置，常用于匹配单词边界 如 我想从字符串中"This is me"匹配单独的单词 "is" 正则就要写成 "\\bis\\b"。\n4. "\\d":匹配数字。例如要匹配一个固定格式的电话号码以0开头前4位后7位，如0737-5686123 正则:^0\\d\\d\\d-\\d\\d\\d\\d\\d\\d\\d$\n5. "\\w":匹配字母，数字，下划线。\n6. "\\s":匹配空格。\n7. ".":匹配除了换行符以外的任何字符。\n8. "[]":字符组 匹配包含括号内元素的字符。\n')])]),t._v(" "),a("p",[a("strong",[t._v("它们的反义只要改成大写就行啦：")])]),t._v(" "),a("pre",[a("code",[t._v('1. "\\W" 匹配任意不是字母，数字，下划线 的字符\n2. "\\S" 匹配任意不是空白符的字符\n3. "\\D" 匹配任意非数字的字符\n4. "\\B" 匹配不是单词开头或结束的位置\n5. "[abc]" 匹配除了abc以外的任意字符\n')])]),t._v(" "),a("h2",{attrs:{id:"二-限定符（量词）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-限定符（量词）","aria-hidden":"true"}},[t._v("#")]),t._v(" 二.限定符（量词）")]),t._v(" "),a("pre",[a("code",[t._v('1. "*"重复零次或更多\n2. "+"重复一次或更多次\n3. "?"(占有) 重复零次或一次\n4. "{n}" 重复n次\n5. "{n,m}" 重复n到m次\n6. "{n,}" 重复n次或更多次\n')])]),t._v(" "),a("h2",{attrs:{id:"三-懒惰限定符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-懒惰限定符","aria-hidden":"true"}},[t._v("#")]),t._v(" 三.懒惰限定符")]),t._v(" "),a("pre",[a("code",[t._v('1. "*?" 重复任意次，但尽可能少重复\n2. "+?" 重复1次或更多次，但尽可能少重复\n3. "??" 重复0次或1次，但尽可能少重复\n4. "{n,m}?" 重复n到m次，但尽可能少重复\n5. "{n,}?" 重复n次以上，但尽可能少重复\n')])]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("pre",[a("code",[t._v("1. runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。\n2. runoo*b，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。\n3. colou?r  可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。\n")])]),t._v(" "),a("h2",{attrs:{id:"四-反向引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-反向引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 四.反向引用")]),t._v(" "),a("p",[t._v("对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 \\n 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。")]),t._v(" "),a("blockquote",[a("p",[t._v("Is is the cost of of gasoline going up up?")])]),t._v(" "),a("p",[t._v("上面的句子很显然有多个重复的单词。如果能设计一种方法定位该句子，而不必查找每个单词的重复出现，那该有多好。下面的正则表达式使用单个子表达式来实现这一点：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var str = "Is is the cost of of gasoline going up up";\nvar patt1 = /\\b([a-z]+) \\1\\b/ig;\ndocument.write(str.match(patt1));\n')])])]),a("h2",{attrs:{id:"五-运算符优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-运算符优先级","aria-hidden":"true"}},[t._v("#")]),t._v(" 五.运算符优先级")]),t._v(" "),a("p",[t._v("正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。"),a("br"),t._v("\n下表从最高到最低说明了各种正则表达式运算符的优先级顺序：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\")]),t._v(" "),a("td",[t._v("转义符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("(), (?😃, (?=), []")]),t._v(" "),a("td",[t._v("圆括号和方括号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("^, $, \\任何元字符、任何字符")]),t._v(" "),a("td",[t._v("定位点和序列（即：位置和顺序）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("|")]),t._v(" "),a("td",[t._v('替换，"或"操作。字符具有高于替换运算符的优先级')])])])]),t._v(" "),a("h1",{attrs:{id:"参考与致谢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考与致谢","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考与致谢")]),t._v(" "),a("p",[t._v("1."),a("a",{attrs:{href:"http://www.runoob.com/regexp/regexp-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("菜鸟教程"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("2."),a("a",{attrs:{href:"https://c.runoob.com/front-end/854",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式在线测试工具"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("✨"),a("strong",[t._v("感谢阅读。")])])])},[],!1,null,null,null);r.default=n.exports}}]);