{"remainingRequest":"/Users/zhuyaokun/vuepress-blog/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/zhuyaokun/vuepress-blog/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhuyaokun/vuepress-blog/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhuyaokun/vuepress-blog/node_modules/@vuepress/core/lib/client/components/TOC.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhuyaokun/vuepress-blog/node_modules/@vuepress/core/lib/client/components/TOC.vue","mtime":499162500000},{"path":"/Users/zhuyaokun/vuepress-blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhuyaokun/vuepress-blog/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhuyaokun/vuepress-blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhuyaokun/vuepress-blog/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/zhuyaokun/vuepress-blog/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/zhuyaokun/vuepress-blog/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport HeaderList from './HeaderList.vue';\nexport default {\n  props: {\n    listType: {\n      type: [String, Array],\n      default: 'ul'\n    },\n    includeLevel: {\n      type: Array,\n      default: function _default() {\n        return [2, 3];\n      }\n    }\n  },\n  components: {\n    HeaderList: HeaderList\n  },\n  computed: {\n    listTypes: function listTypes() {\n      return typeof this.listType === 'string' ? [this.listType] : this.listType;\n    },\n    groupedHeaders: function groupedHeaders() {\n      return this.groupHeaders(this.$page.headers).list;\n    }\n  },\n  methods: {\n    groupHeaders: function groupHeaders(headers) {\n      var startLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var list = [];\n      var index = 0;\n\n      while (index < headers.length) {\n        var header = headers[index];\n        if (header.level < startLevel) break;\n\n        if (header.level > startLevel) {\n          var result = this.groupHeaders(headers.slice(index), header.level);\n\n          if (list.length) {\n            list[list.length - 1].children = result.list;\n          } else {\n            list.push.apply(list, _toConsumableArray(result.list));\n          }\n\n          index += result.index;\n        } else {\n          if (header.level <= this.includeLevel[1] && header.level >= this.includeLevel[0]) {\n            list.push(_objectSpread({}, header));\n          }\n\n          index += 1;\n        }\n      }\n\n      return {\n        list: list,\n        index: index\n      };\n    }\n  }\n};",null]}