/**
 * Type Declarations for VuePress's Theme
 */
import { PluginEntry } from './Plugin'

/**
 * `ThemeEntry` is used to configure theme.
 *
 * For local theme, `ThemeEntry` refers to the contents exported from the `index.js` in the theme's
 * root directory.
 *
 * For theme from deps, `ThemeEntry` refers to the contents exported from the `"main"` file specified
 * in package.json.
 *
 */
export declare interface ThemeEntry extends PluginEntry {
  /**
   * Specify the theme's name to inherit, It can be an NPM package name (e.g. @vuepress/theme-default)
   * or a local absolute path.
   * Note that only "Second Order Theme" is supported.
   * */
  extend?: string;
  /**
   * Specify the global layout component, it should be an absolute path to SFC.
   */
  globalLayout?: string;
  /**
   * Specify the plugins to be applied for the current theme.
   */
  plugins?: Array<PluginEntry>;
}

/**
 * `ThemeMeta` contains info for a theme
 */
export declare interface ThemeMeta {
  path: string;
  name: string;
  shortcut: string;
  entry: ThemeEntry;
}

/**
 * `VueSFC` is used to describe a Vue SFC component
 */
interface VueSFC {
  path: string;
  filename: string;
  componentName: string;
  isInternal: boolean;
}

/**
 * `componentMap` is an key-value map to store the collection of components
 */
interface componentMap {
  [componentName: string]: VueSFC;
}

/**
 * ThemeAPI is mainly used to solve the inheritance problem of them in VuePress
 */
export declare class ThemeAPI {
  constructor (theme: ThemeMeta, parentTheme: ThemeMeta)

  theme: ThemeMeta;
  parentTheme: ThemeMeta | {};
  existsParentTheme: boolean;
  /**
   * A VuePress plugin for ThemeAPI, which mainly sets alias for users.
   * The alias `@theme` will automatically refer to the theme or the parent theme depending on
   * whether the file exists or not.
   *
   * So if you're developing an `atomic theme`, you should use `@theme/components/xx` or `@theme/layouts/xx`
   * to refer to SFC in all of your components, so that once a file with the same name exists in the same
   * location in a `derived theme`, the alias will be automatically updated to the `derived theme`, therefore, you have implemented `component override` in the inheritance of Theme.
   */
  vuepressPlugin: PluginEntry;
  componentMap: componentMap;
  layoutComponentMap: componentMap;
}

