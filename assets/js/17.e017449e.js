(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{311:function(t,r,a){"use strict";a.r(r);var e=a(1),s=Object(e.a)({},function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("假如有40亿个整数，现在再给一个新的整数，你会如何判断这个新的整数是否在这40亿个整数中？😣")]),t._v(" "),a("h1",{attrs:{id:"常规思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常规思路","aria-hidden":"true"}},[t._v("#")]),t._v(" 常规思路")]),t._v(" "),a("h2",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set","aria-hidden":"true"}},[t._v("#")]),t._v(" Set")]),t._v(" "),a("p",[t._v("你的第一反应是什么呢，是不是："),a("br"),t._v(" "),a("strong",[t._v("“把40亿个整数存入一个set，判断新来的数是否在set中。”")])]),t._v(" "),a("p",[t._v("那么问题来了？如果整数是32位，那么你的set需要多大的空间？"),a("br"),t._v(" "),a("strong",[t._v("“一个整数4个字节，40亿个就是160亿字节，也就是大概16GB。”")])]),t._v(" "),a("p",[t._v("可是16GB内存太大啦～如果机器内存只有2GB，这该怎么办呢？"),a("br"),t._v(" "),a("strong",[t._v("“分8次加载进内存。”")])]),t._v(" "),a("p",[t._v("这样带来的后果就是十分慢。要知道，从磁盘加载数据是 "),a("strong",[t._v("磁盘io操作")]),t._v("，是非常慢的，比内存操作还慢，而且每次加载的数据量还这么大，次数又多，可想而知最终可能需要的时间达到了小时级别。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/10/14/iU1mdg.png",alt:"iU1mdg.png"}})]),t._v(" "),a("h2",{attrs:{id:"分布式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式","aria-hidden":"true"}},[t._v("#")]),t._v(" 分布式")]),t._v(" "),a("p",[t._v("现在我们换一种思路：内存2GB的机器，我们用8台。这样大家是不是想到了 "),a("strong",[t._v("分布式")]),t._v("？")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://imgchr.com/i/iU13Q0",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://s1.ax1x.com/2018/10/14/iU13Q0.md.png",alt:"iU13Q0.md.png"}}),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("参考资料："),a("a",{attrs:{href:"https://blog.csdn.net/youanyyou/article/details/79406507",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是分布式"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("这样做的话，因为每台机器都可以一次性把数据读入内存，在比较的时候不用来回加载数据了，所以可以节省加载数据的开销。")]),t._v(" "),a("h1",{attrs:{id:"🌟位图法-bitmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌟位图法-bitmap","aria-hidden":"true"}},[t._v("#")]),t._v(" 🌟位图法--Bitmap")]),t._v(" "),a("p",[t._v("判断一个数存不存在，其实可以用位来表示。1代表存在，0代表不存在。这就引出了一个新的问题，40亿个数，难道位图里有40亿个1吗？")]),t._v(" "),a("p",[t._v("当然不是。仔细想想的话，可以发现32位int的范围，总共就是2的32次方，大概42亿多点。所以你可以申请2的32次方个位。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://imgchr.com/i/iUYkb6",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://s1.ax1x.com/2018/10/14/iUYkb6.md.png",alt:"iUYkb6.md.png"}}),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("如上图，这样每一个数字都和位图中的位置index对应上了。如：5就是位图中的第5位；7就是位图中的第7位。")]),t._v(" "),a("p",[t._v("也就是说，此时如题目中所说，来了一个数字n，则我们去位图中找第n位。若是0，则这个数在这40亿个数中不存在；若是1，则存在。")]),t._v(" "),a("p",[t._v("这种方法的空间为：2的32次方个位，相当于2的29次方个字节，即大约"),a("strong",[t._v("500MB")]),t._v("。")]),t._v(" "),a("p",[t._v("以上，就是bitmap的介绍咯，你学到了吗～")]),t._v(" "),a("p",[t._v("感谢阅读。")])])},[],!1,null,null,null);r.default=s.exports}}]);